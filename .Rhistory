#########################################
#
# rootfun <- function(Time, State, Pars) {
#   dstate <- unlist(lv(Time, State, Pars))
#   sum(abs(dstate)) - 1e-4
# }
# lvout<-as.data.frame(lsodar(func=lv,,y=init,parms=params,times=time,rootfun=rootfun))
# lvout=floor(lvout)
##########################################
# End attempt to run only to stead state #
##########################################
# Plot out the results of the ODE.
# First plot is for N vs P (sp1 v sp2)
plot(lvout$P~lvout$N,type="o",col="blue",xlim=c(0,max(lvout$N)+20),
ylim=c(0,max(lvout$P)+20), main = "Species 1 vs Species 2",xlab="Species 1",
ylab="Species 2")
# Second plot for N & P v Time
plot(lvout$N~time,ylim=c(0,max(lvout$N)+20),ylab="Population size",type="l",lwd=2,col="blue")
points(lvout$P~time,col="red",type="l",lwd=2)
# legend (x =,col=c("blue","red"),lty=c(1,1),legend=c("Sp. 1", "Sp. 2"),bty="n",ncol=2)
#
#
# ## Animation
# plot(1,type="n",xlim=c(0,max(params["K1"],params["K2"]/params["b"],p[1])+20),ylim=c(0,max(params["K2"] ,params["K1"]/params["a"],p[2])+20),xlab="Species 1",ylab="Species 2",main="ZNGIs for Sp.1 and Sp.2",xaxs="i",yaxs="i",las=1)
# lines(x=c(params["K1"],0),y=c(0,params["K1"]/params["a"]),lwd=2,col=4)
# lines(x=c(params["K2"]/params["b"],0),y=c(0,params["K2"]),col=2,lwd=2)
# points(x=lvout[1,2],y=lvout[1,3],cex=1.1,pch=20)
#
# for(i in 2:nrow(lvout)){
#   segments(lvout[i-1,2],lvout[i-1,3],lvout[i,2],lvout[i,3],lty=3)
#   points(x=lvout[i,2],y=lvout[i,3],cex=1.5,pch=20)
#   arrows(lvout[i,2],lvout[i,3],lvout[i+1,2],lvout[i,3],length=.1,col=4)
#   arrows(lvout[i,2],lvout[i,3],lvout[i,2],lvout[i+1,3],length=.1,col=2)
#   segments(lvout[i,2],lvout[i+1,3],lvout[i+1,2],lvout[i+1,3],col=4,lty=3)
#   segments(lvout[i+1,2],lvout[i,3],lvout[i+1,2],lvout[i+1,3],col=2,lty=3)
#   arrows(lvout[i,2],lvout[i,3],lvout[i,2]-.9*(lvout[i,2]-lvout[i+1,2]),lvout[i,3]-.9*(lvout[i,3]-lvout[i+1,3]),length=.1)
#
#   Sys.sleep(1)
#   }
#
#
#
#
#
}
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
# run the ODE for 100 time steps
time  <- seq (0, 100, by=1)
# define species growth rates, carrying capacities and interspecific competition parameters
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- ode(func=lv,y=init,parms=params,times=time)
plot.all(lvout)
scripts
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
# run the ODE for 100 time steps
time  <- seq (0, 100, by=1)
# define species growth rates, carrying capacities and interspecific competition parameters
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- ode(func=lv,y=init,parms=params,times=time)
lvout <- ode(func=lv_func,y=init,parms=params,times=time)
lvout <- floor(as.data.frame(ode(func=lv_func,y=init,parms=params,times=time)))
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
# run the ODE for 100 time steps
time  <- seq (0, 100, by=1)
# define species growth rates, carrying capacities and interspecific competition parameters
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- floor(as.data.frame(ode(func=lv_func,y=init,parms=params,times=time)))
plot.all(lvout)
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
time  <- seq (0, 100, by=1)
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- floor(as.data.frame(ode(func=lv_func,y=init,parms=params,times=time)))
plot.all(lvout)
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
time  <- seq (0, 100, by=1)
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- floor(as.data.frame(ode(func=lv_func,y=init,parms=params,times=time)))
plot.all(lvout)
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
time  <- seq (0, 100, by=1)
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- floor(as.data.frame(ode(func=lv_func,y=init,parms=params,times=time)))
plot.all(lvout)
lvout
plot.all(lvout)
plot.all(lvout)
lvout
lvout
lvout
lvout
lvout
plot.all(lvout)
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
time  <- seq (0, 100, by=1)
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- floor(as.data.frame(ode(func=lv_func,y=init,parms=params,times=time)))
plot.all(lvout)
source("~/grad/Dropbox/courses/fall2014/entm798v/scripts/R_project/lv_source.R")
plot.all
source('~/.active-rstudio-document', echo=TRUE)
## Updated 31 Oct 2014
## Ideas:
# introduce ways to do density dependent growth of prey; (done on 31 Oct: prey_k parameter in lvpp)
# refuges for prey;
# non-type I functional response of predator
# Loess over lines so things look smooth and not step-wise
library(deSolve) # package for solving diferential equation
lvpp <- function(pp.time,pp.init,pp.params,prey_K=FALSE) {
with (as.list(c(pp.pp.time,pp.init,pp.params)), {
# Parameters
# N = prey population size; P = predator population size
# r = intrinsic growth rate of prey
# a = predation efficiency
# b = conversion efficiency of prey into predator
# d = intrinsic dseath rate of predator
# prey_k = carrying capacity for prey; only used if user-defined
if (exists("prey_k")) {
dNdt <- ((r*N)*(1-(N/prey_k)))- (a*N*P)
}
else {
dNdt <- (r*N) - (a*N*P)
}
dPdt <- (b*a*N*P) - (d*P)
return(list(c(dNdt,dPdt)))
})
}
# Set ODE parameters
# These parameters give really whacky results, should try to find better parameters for demonstration!
pp.time <-seq(0,1000,by=.1)
pp.params <- c(r=0.1,a=0.005,d=0.01,b=.1,prey_k=500)
# pp.params <- c(r=0.1,a=0.005,d=0.01,b=.1)
# Set pp.initial population sizes of Prey (N) and Predator (P)
pp.init = c(N=25,P=10)
# Run the ODE
lvout<-floor(as.data.frame(ode(func=lvpp,y=pp.init,parms=pp.params,times=pp.time)))
str (lvout)
par(mfrow=c(1,2),bg="white")
# Plot P vs N; draw in the starting N and P parameters, draw in the ZNGIs
plot(lvout$P~lvout$N,ylim=c(0,max(lvout$P)+20),type="l",xlab="Prey population size",ylab="Predator population size")
points(x=pp.init["N"],y=pp.init["P"],col="red",pch=19)
abline(v=pp.params["d"]/(pp.params["b"]*pp.params["a"]))
abline(h=pp.params["r"]/pp.params["a"])
# Plot N & P vs pp.time
plot(lvout$N~pp.time,type="l",xlab="pp.time",ylab="Population Size",ylim=c(0,max(max(lvout$N),max(lvout$P))+50))
points(lvout$P~pp.time,col="red",type="l")
legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n")
## Updated 31 Oct 2014
## Ideas:
# introduce ways to do density dependent growth of prey; (done on 31 Oct: prey_k parameter in lvpp)
# refuges for prey;
# non-type I functional response of predator
# Loess over lines so things look smooth and not step-wise
library(deSolve) # package for solving diferential equation
lvpp <- function(pp.time,pp.init,pp.params,prey_K=FALSE) {
with (as.list(c(pp.time,pp.init,pp.params)), {
# Parameters
# N = prey population size; P = predator population size
# r = intrinsic growth rate of prey
# a = predation efficiency
# b = conversion efficiency of prey into predator
# d = intrinsic dseath rate of predator
# prey_k = carrying capacity for prey; only used if user-defined
if (exists("prey_k")) {
dNdt <- ((r*N)*(1-(N/prey_k)))- (a*N*P)
}
else {
dNdt <- (r*N) - (a*N*P)
}
dPdt <- (b*a*N*P) - (d*P)
return(list(c(dNdt,dPdt)))
})
}
# Set ODE parameters
# These parameters give really whacky results, should try to find better parameters for demonstration!
pp.time <-seq(0,1000,by=.1)
pp.params <- c(r=0.1,a=0.005,d=0.01,b=.1,prey_k=500)
# pp.params <- c(r=0.1,a=0.005,d=0.01,b=.1)
# Set pp.initial population sizes of Prey (N) and Predator (P)
pp.init = c(N=25,P=10)
# Run the ODE
lvout<-floor(as.data.frame(ode(func=lvpp,y=pp.init,parms=pp.params,times=pp.time)))
str (lvout)
par(mfrow=c(1,2),bg="white")
# Plot P vs N; draw in the starting N and P parameters, draw in the ZNGIs
plot(lvout$P~lvout$N,ylim=c(0,max(lvout$P)+20),type="l",xlab="Prey population size",ylab="Predator population size")
points(x=pp.init["N"],y=pp.init["P"],col="red",pch=19)
abline(v=pp.params["d"]/(pp.params["b"]*pp.params["a"]))
abline(h=pp.params["r"]/pp.params["a"])
# Plot N & P vs pp.time
plot(lvout$N~pp.time,type="l",xlab="pp.time",ylab="Population Size",ylim=c(0,max(max(lvout$N),max(lvout$P))+50))
points(lvout$P~pp.time,col="red",type="l")
legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n")
lvpp <- function(pp.time,pp.init,pp.params,prey_K=FALSE) {
with (as.list(c(pp.time,pp.init,pp.params)), {
# Parameters
# N = prey population size; P = predator population size
# r = intrinsic growth rate of prey
# a = predation efficiency
# b = conversion efficiency of prey into predator
# d = intrinsic dseath rate of predator
# prey_k = carrying capacity for prey; only used if user-defined
if (exists("prey_k")) {
dNdt <- ((r*N)*(1-(N/prey_k)))- (a*N*P)
}
else {
dNdt <- (r*N) - (a*N*P)
}
dPdt <- (b*a*N*P) - (d*P)
return(list(c(dNdt,dPdt)))
})
}
pp.time <-seq(0,1000,by=.1)
pp.params <- c(r=0.1,a=0.005,d=0.01,b=.1,prey_k=500)
pp.init = c(N=25,P=10)
lvout<-floor(as.data.frame(ode(func=lvpp,y=pp.init,parms=pp.params,times=pp.time)))
library(deSolve)
lvout<-floor(as.data.frame(ode(func=lvpp,y=pp.init,parms=pp.params,times=pp.time)))
str (lvout)
par(mfrow=c(1,2),bg="white")
# Plot P vs N; draw in the starting N and P parameters, draw in the ZNGIs
plot(lvout$P~lvout$N,ylim=c(0,max(lvout$P)+20),type="l",xlab="Prey population size",ylab="Predator population size")
points(x=pp.init["N"],y=pp.init["P"],col="red",pch=19)
abline(v=pp.params["d"]/(pp.params["b"]*pp.params["a"]))
abline(h=pp.params["r"]/pp.params["a"])
# Plot N & P vs pp.time
plot(lvout$N~pp.time,type="l",xlab="pp.time",ylab="Population Size",ylim=c(0,max(max(lvout$N),max(lvout$P))+50))
points(lvout$P~pp.time,col="red",type="l")
legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n")
```
--- bg:#404040
library("shiny")
runApp("~/grad/Dropbox/other/shiny_exercises/lotka/")
library(shiny)
l
?knit
?knitr
library(slidify)
citation()
citation(slidify)
citation("slidify")
library(knitr)
setwd("~/gr")
setwd("~/grad/Dropbox/courses/fall2014/entm798v/scripts/present/")
purl("index.Rmd")
## ----,eval=TRUE----------------------------------------------------------
# install.packages("deSolve")
require("deSolve")
ls("package:deSolve")
## ------------------------------------------------------------------------
str(ode)
## ------------------------------------------------------------------------
str(ode)
## ------------------------------------------------------------------------
# Define the function lv
lv <- function (time , init , params) {
# set everything up as a list to be accessed throughout the function
with (as.list(c(time , init , params)), {
# description of parameters to be included in params:
# r1 = growth rate of Sp. 1; r2 = growth rate of Sp. 2
# N = population size of Sp. 1; P = Population Size Sp. 2
# a = competitive impact of Sp. 2 on Sp. 1; b = competitive impact of Sp 1 on Sp 2
# K1 and K2 = carrying capacities of Sp. 1 and Sp. 2, respectively
# Define the pair of ODEs:
# Growth of species 1 is a function of species 2
N1 <- ( r1 * N * (1 - (N+a*P) / K1) )
# Growth of species 2 is a function of species 1
N2 <- ( r2 * P * (1 - (P+b*N) / K2) )
# Return a list of the current population size of Sp.1  and Sp. 2
return (list (c (N1 , N2)))
})
}
## ----,results='hide'-----------------------------------------------------
# randomly select values for starting N1 and N2
p <- runif(n = 2, min = 50, max = 150)
init<-c(N = floor(p[1]), P = floor (p[2]))
# run the ODE for 100 time steps
time  <- seq (0, 100, by=1)
# define species growth rates, carrying capacities and interspecific competition parameters
params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
# run the ODE
lvout <- floor(as.data.frame(ode(func=lv,y=init,parms=params,times=time)))
str(lvout)
## ----, echo=FALSE--------------------------------------------------------
str(lvout)
## ----, eval=FALSE, fig.width=12,fig.height=7-----------------------------
## par(mfrow=c(2,2),bg="white")
##
## # Plot equation and parameters
##
## # Panel A: current parameter values
## plot(1:10,type="n",xlab="",ylab="",xaxt="n",yaxt="n",bty="n")
## text(5,9,expression(frac(dN[1],dt) == r[1]*N[1]*bgroup("(",1-frac(N[1]+alpha*N[2],K[1]),")")),cex=1.5)
## text(3,5.7,bquote(N[1] == .(floor(p[1]))),cex=1.5)
## text(7,5.7,bquote(N[2] == .(floor(p[2]))),cex=1.5)
## text(3,4.2,bquote(r[1] == .(params["r1"])),cex=1.5)
## text(7,4.2,bquote(r[2] == .(params["r2"])),cex=1.5)
## text(3,2.7,bquote(alpha == .(params["a"])),cex=1.5)
## text(7,2.7,bquote(beta == .(params["b"])),cex=1.5)
## text(3,1.2,bquote(K[1] == .(params["K1"])),cex=1.5)
## text(7,1.2,bquote(K[2] == .(params["K2"])),cex=1.5)
##
## # Panel B: Zero Net Growth Isoclines based on parameters above.
## plot(1,type="n",xlim=c(0,max(params["K1"],params["K2"]/params["b"])+20),
##       ylim=c(0,max(params["K2"]  ,params["K1"]/params["a"])+20),
##       xlab  ="Species 1",ylab="Species 2",main="ZNGIs for Sp.1 and Sp.2",
##       xaxs="i",yaxs="i",cex.axis=1.5,cex.lab=1.5)
##
## lines  (x = c(params["K1"],0),y = c(0,params["K1"]/params["a"]),lwd=2,col="blue")
## lines  (x = c(params["K2"]/params["b"], 0) ,y = c(0,params["K2"]),lwd=2,col="red")
## points (x = p[1] , y = p[2] , cex = 2 , pch = 20)
##
##
## # Plot out the results of the ODE.
## # Panel C: Sp. 1 vs Sp. 2
##
## plot(lvout$P~lvout$N,type="o",col="blue",xlim=c(0,max(lvout$N)+20),
##      ylim=c(0,max(lvout$P)+20), main = "Species 1 vs Species 2",xlab="Species 1",
##      ylab="Species 2",cex.axis=1.5,cex.lab=1.5)
##
## # Panel D: N1 and N2 vs Time
## plot(lvout$N~time,ylim=c(0,max(lvout$N)+20),ylab="Population size",type="l",lwd=2,col="blue",cex.axis=1.5,cex.lab=1.5,main="Population size vs time")
## points(lvout$P~time,col="red",type="l",lwd=2)
## # legend (x =,col=c("blue","red"),lty=c(1,1),legend=c("Sp. 1", "Sp. 2"),bty="n",ncol=2)
## ----, echo=FALSE, fig.width=12,fig.height=7-----------------------------
par(mfrow=c(2,2),bg="white",oma=c(2,2,2,2))
# Plot equation and parameters
plot(1:10,type="n",xlab="",ylab="",xaxt="n",yaxt="n",bty="n")
text(5,9,expression(frac(dN[1],dt) == r[1]*N[1]*bgroup("(",1-frac(N[1]+alpha*N[2],K[1]),")")),cex=1.5)
text(3,5.7,bquote(N[1]== .(floor(p[1]))),cex=1.5)
text(7,5.7,bquote(N[2]== .(floor(p[2]))),cex=1.5)
text(3,4.2,bquote(r[1]== .(params["r1"])),cex=1.5)
text(7,4.2,bquote(r[2]== .(params["r2"])),cex=1.5)
text(3,2.7,bquote(alpha== .(params["a"])),cex=1.5)
text(7,2.7,bquote(beta== .(params["b"])),cex=1.5)
text(3,1.2,bquote(K[1]== .(params["K1"])),cex=1.5)
text(7,1.2,bquote(K[2]== .(params["K2"])),cex=1.5)
# plot the Zero Net Growth Isoclines based on parameters above.
plot(1,type="n",xlim=c(0,max(params["K1"],params["K2"]/params["b"])+20),
ylim=c(0,max(params["K2"]  ,params["K1"]/params["a"])+20),
xlab  ="Species 1",ylab="Species 2",main="ZNGIs for Sp.1 and Sp.2",
xaxs="i",yaxs="i",cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x = c(params["K1"],0),y = c(0,params["K1"]/params["a"]),lwd=2,col="blue")
lines(x = c(params["K2"]/params["b"], 0) ,y = c(0,params["K2"]),lwd=2,col="red")
# plot the starting population size
points(x=p[1],y=p[2],cex=2,pch=20)
# Plot out the results of the ODE.
# First plot is for N vs P (sp1 v sp2)
plot(lvout$P~lvout$N,type="o",col="blue",xlim=c(0,max(lvout$N)+20),
ylim=c(0,max(lvout$P)+20), main = "Species 1 vs Species 2",xlab="Species 1",
ylab="Species 2",cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
# Second plot for N & P v Time
plot(lvout$N~time,ylim=c(0,max(lvout$N)+20),ylab="Population size",type="l",lwd=2,col="blue",cex.axis=1.5,cex.lab=1.5,main="Population size vs time",cex.main=1.5)
points(lvout$P~time,col="red",type="l",lwd=2)
## ----,eval=FALSE---------------------------------------------------------
## source("~/path/to/lv_source.R")
##
## p <- runif(n = 2, min = 50, max = 150)
## init<-c(N = floor(p[1]), P = floor (p[2]))
## time  <- seq (0, 100, by=1)
## params <- c(r1 = 1, b = 1.5 , K1 = 50 , r2 = 1, a = .1 , K2 = 100)
##
## # run the ODE
## lvout <- floor(as.data.frame(ode(func=lv_func,y=init,parms=params,times=time)))
##
## plot.all(lvout)
## ------------------------------------------------------------------------
lvpp <- function(pp.time,pp.init,pp.params,prey_K=FALSE) {
with (as.list(c(pp.time,pp.init,pp.params)), {
# Parameters
# N = prey population size; P = predator population size
# r = intrinsic growth rate of prey
# a = predation efficiency
# b = conversion efficiency of prey into predator
# d = intrinsic dseath rate of predator
# prey_k = carrying capacity for prey; only used if user-defined
if (exists("prey_k")) {
dNdt <- ((r*N)*(1-(N/prey_k)))- (a*N*P)
}
else {
dNdt <- (r*N) - (a*N*P)
}
dPdt <- (b*a*N*P) - (d*P)
return(list(c(dNdt,dPdt)))
})
}
## ------------------------------------------------------------------------
# Set ODE parameters
pp.time <-seq(0,3000,by=.1)
pp.params <- c(r=0.1,a=0.005,d=0.01,b=.1,prey_k=500)
# Set pp.initial population sizes of Prey (N) and Predator (P)
pp.init = c(N=25,P=10)
# Run the ODE
lvppout<-floor(as.data.frame(ode(func=lvpp,y=pp.init,parms=pp.params,times=pp.time)))
str (lvppout)
## ----, eval=FALSE--------------------------------------------------------
## par(mfrow=c(1,2),bg="white")
## # Plot P vs N; draw in the starting N and P parameters, draw in the ZNGIs
## plot (lvppout$P~lvppout$N,ylim=c(0,max(lvppout$P)+20),type="l",xlab="Prey population size",ylab="Predator population size")
## points (x=pp.init["N"],y=pp.init["P"],col="red",pch=19)
## abline (v=pp.params["d"]/(pp.params["b"]*pp.params["a"]))
## abline (b=pp.params["r"]/(prey_k*pp.params["a"]), a = pp.params["r"]/pp.params["a"])
##
## # Plot N & P vs pp.time
## plot(lvppout$N~pp.time,type="l",xlab="pp.time",ylab="Population Size",ylim=c(0,max(max(lvout$N),max(lvout$P))+50))
## points(lvppout$P~pp.time,col="red",type="l")
## legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n")
## ----, echo=FALSE,fig.width = 12-----------------------------------------
par(mfrow=c(1,2),bg="white")
# Plot P vs N; draw in the starting N and P parameters, draw in the ZNGIs
plot(lvppout$P~lvppout$N,ylim=c(0,max(lvppout$P)+20),type="l",xlab="Prey population size",ylab="Predator population size")
points(x=pp.init["N"],y=pp.init["P"],col="red",pch=19)
abline(v=pp.params["d"]/(pp.params["b"]*pp.params["a"]))
# abline(h=pp.params["r"]/pp.params["a"])
abline (b=-(pp.params["r"]/(pp.params["prey_k"]*pp.params["a"])), a = pp.params["r"]/pp.params["a"])
# Plot N & P vs pp.time
plot(lvppout$N~pp.time,type="l",xlab="pp.time",ylab="Population Size",ylim=c(0,max(max(lvout$N),max(lvout$P))+50))
points(lvppout$P~pp.time,col="red",type="l")
legend(x="topright",col=c("black","red"),lty=1,legend=c("Prey","Predator"),bty="n")
## ----, eval = F----------------------------------------------------------
##
## #########################################
## # Attempting to run only to stead state #
## #########################################
##
## rootfun <- function(Time, State, Pars) {
##   dstate <- unlist(lv(Time, State, Pars))
##   sum(abs(dstate)) - 1e-4
## }
## steady.lvout<-as.data.frame(lsodar(func=lv,,y=init,parms=params,times=time,rootfun=rootfun))
## steady.lvout=floor(lvout)
##
## ##########################################
## # End attempt to run only to stead state #
## ##########################################
plot(1:10,type="n",xlab="",ylab="",xaxt="n",yaxt="n",bty="n")
text(5,9,expression(frac(dN[1],dt) == r[1]*N[1]*bgroup("(",1-frac(N[1]+alpha*N[2],K[1]),")")),cex=1.5)
text(3,5.7,bquote(N[1]== .(floor(p[1]))),cex=1.5)
text(7,5.7,bquote(N[2]== .(floor(p[2]))),cex=1.5)
text(3,4.2,bquote(r[1]== .(params["r1"])),cex=1.5)
text(7,4.2,bquote(r[2]== .(params["r2"])),cex=1.5)
text(3,2.7,bquote(alpha== .(params["a"])),cex=1.5)
text(7,2.7,bquote(beta== .(params["b"])),cex=1.5)
text(3,1.2,bquote(K[1]== .(params["K1"])),cex=1.5)
text(7,1.2,bquote(K[2]== .(params["K2"])),cex=1.5)
# plot the Zero Net Growth Isoclines based on parameters above.
plot(1,type="n",xlim=c(0,max(params["K1"],params["K2"]/params["b"])+20),
ylim=c(0,max(params["K2"]  ,params["K1"]/params["a"])+20),
xlab  ="Species 1",ylab="Species 2",main="ZNGIs for Sp.1 and Sp.2",
xaxs="i",yaxs="i",cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x = c(params["K1"],0),y = c(0,params["K1"]/params["a"]),lwd=2,col="blue")
lines(x = c(params["K2"]/params["b"], 0) ,y = c(0,params["K2"]),lwd=2,col="red")
# plot the starting population size
points(x=p[1],y=p[2],cex=2,pch=20)
# Plot out the results of the ODE.
# First plot is for N vs P (sp1 v sp2)
plot(lvout$P~lvout$N,type="o",col="blue",xlim=c(0,max(lvout$N)+20),
ylim=c(0,max(lvout$P)+20), main = "Species 1 vs Species 2",xlab="Species 1",
ylab="Species 2",cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
# Second plot for N & P v Time
plot(lvout$N~time,ylim=c(0,max(lvout$N)+20),ylab="Population size",type="l",lwd=2,col="blue",cex.axis=1.5,cex.lab=1.5,main="Population size vs time",cex.main=1.5)
points(lvout$P~time,col="red",type="l",lwd=2)
plot(1:10,type="n",xlab="",ylab="",xaxt="n",yaxt="n",bty="n")
text(5,9,expression(frac(dN[1],dt) == r[1]*N[1]*bgroup("(",1-frac(N[1]+alpha*N[2],K[1]),")")),cex=1.5)
text(3,5.7,bquote(N[1]== .(floor(p[1]))),cex=1.5)
text(7,5.7,bquote(N[2]== .(floor(p[2]))),cex=1.5)
text(3,4.2,bquote(r[1]== .(params["r1"])),cex=1.5)
text(7,4.2,bquote(r[2]== .(params["r2"])),cex=1.5)
text(3,2.7,bquote(alpha== .(params["a"])),cex=1.5)
text(7,2.7,bquote(beta== .(params["b"])),cex=1.5)
text(3,1.2,bquote(K[1]== .(params["K1"])),cex=1.5)
text(7,1.2,bquote(K[2]== .(params["K2"])),cex=1.5)
# plot the Zero Net Growth Isoclines based on parameters above.
plot(1,type="n",xlim=c(0,max(params["K1"],params["K2"]/params["b"])+20),
ylim=c(0,max(params["K2"]  ,params["K1"]/params["a"])+20),
xlab  ="Species 1",ylab="Species 2",main="ZNGIs for Sp.1 and Sp.2",
xaxs="i",yaxs="i",cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
lines(x = c(params["K1"],0),y = c(0,params["K1"]/params["a"]),lwd=2,col="blue")
lines(x = c(params["K2"]/params["b"], 0) ,y = c(0,params["K2"]),lwd=2,col="red")
# plot the starting population size
points(x=p[1],y=p[2],cex=2,pch=20)
# Plot out the results of the ODE.
# First plot is for N vs P (sp1 v sp2)
plot(lvout$P~lvout$N,type="o",col="blue",xlim=c(0,max(lvout$N)+20),
ylim=c(0,max(lvout$P)+20), main = "Species 1 vs Species 2",xlab="Species 1",
ylab="Species 2",cex.axis=1.5,cex.lab=1.5,cex.main=1.5)
# Second plot for N & P v Time
plot(lvout$N~time,ylim=c(0,max(lvout$N)+20),ylab="Population size",type="l",lwd=2,col="blue",cex.axis=1.5,cex.lab=1.5,main="Population size vs time",cex.main=1.5)
points(lvout$P~time,col="red",type="l",lwd=2)
